#pragma once
#include "Contour.h"
#include "ERImageData.h"


/*
  ƒл€ работы модул€ необходимо, чтобы
    
    1. файл "ERInterface.h" находилс€ на 1-ом уровне с папкой модул€ "ContourDefiner"
    
    2. была подключена библиотека GPC, причем папка библиотеки должна называтьс€ "GPC"
    и находитьс€ на 1-ом уровне с папкой модул€ "ContourDefiner"
*/

// —оздает контуры на основе начальных внутренних точек контуров, hImage - растр
std::vector<Contour> createContours(const std::vector<Point>& insideContoursPoints, HIMAGE hImage);

std::vector<Contour> createContours(const std::vector<Point>& insideContoursPoints, AbstractImageData* imageData);


// ”дал€ет внутренние контура ("дырки") между контурами contours.
// ƒырки с площадью от 0 до minSquare распредел€ютс€ в пользу контура с наибольшей границей,
// от minSquare до maxSquare распредел€ютс€ равномерно между контурами,
// от maxSquare не учавствуют в распределении
void removeHolesBetweenContours(std::vector<Contour>& contours, double minSquare, double maxSquare);

void removeHolesBetweenContours(std::vector<Contour*>& contours, double minSquare, double maxSquare);


// ќптимизирует векторное описание контуров с помощью алгоритма ƒугласа-ѕекера
void smoothContours(std::vector<Contour>& contours, const double epsilon);

void smoothContours(std::vector<Contour*>& contours, const double epsilon);
